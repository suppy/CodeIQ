n=1234
14 987 610
n=123456
24 121393 75025
n=1234567890
43 1134903170 701408733


考え方

互除法の除算回数が最大になる場合の、「回数」と「その2数（大きい順）」を、除算回数が2から求めていくと、

2 3 2
3 5 3
4 8 5
5 13 8
6 21 13
7 34 21
8 55 34
9 89 55
10 144 89
11 233 144
12 377 233
13 610 377
14 987 610
15 1597 987
16 2584 1597
17 4181 2584
18 6765 4181
19 10946 6765
20 17711 10946
21 28657 17711

という結果が得られた。
この数値を見ると、フィボナッチ数列であることが分かる。
このことから、与えられた n を超えないフィボナッチ数列の前２つの値が求める2数となり、
何番目のフィボナッチ数列かが、回数となる。
参考図書
「コンピュータと素因数分解」和田秀男(著)遊星社1987年発行 p.15



ソースコード

def solve(n)
  print "n=#{n}\n"
  fibo = 1
  fibo1 = 1
  fibonacchi = [fibo1, fibo]
  count = 0
  loop do
    fibo, fibo1 = fibo + fibo1, fibo
    break if fibo > n
    fibonacchi << fibo
    count += 1
  end
  print "#{count} #{fibonacchi[-1]} #{fibonacchi[-2]}\n"
end

n = 1234
solve(n)
n = 123456
solve(n)
n = 1234567890
solve(n)

