Achiomaseic Anesuma Anewatry Anioc Bapomely Baricema Beba Bebacorry Bebalemoma Bebary Camin Carabaic Carapertah Caratah Cardoquist Chimonma Chitamary Choopaly Chooperaly Ciocitotah Ciogoist Cito Citoat Citograor Corma Draat Drama Draxuoly Floic Ginima Ginitah Glaat Glaru Gotah Jachooor Junisooc Junitah Labcara Laboc Labor Labry Licotaor Limeachioly Limelicotah Limemin Limeminnor Limetal Loveaneic Loveaniic Lovema Maceor Mahseoc Masema Maserior Matapermin Matatal Minnlabic Minnoc Monmyraist Monwatmin Muly Munillaist Mupermin Mupopoc Mury Myrarice Nercitoma Nerstamin Nige Nillaneric Nillawatat Nutscinmin Nutslemoist Nutssery Paic Pamacetah Paor Peracassist Peratal Peregrama Pertah Pomeat Popxuoor Primonmin Pripriist Qulabry Riceso Riceturic Rinacardory Rinacassoc Rinagla Rinawatry Rose Roselabtal Rosemaceoc Rosery Rosetal Ruginitah Rumin Rury Sesaist Soanior Somutah Soxuooc Spicechootal Spicesesaoc Stacarary Stachoooc Staoc Suma Sumabebatah Sumaloveat Sumaricetah Tamamin Tamariic Tamastaat Tary Tatah Turcardoist Turry Tursesaly Xuoma Zamacetal Zaor Zaroseor Zaspiceoc
使用した言語：Ruby
以下のアルゴリズムで解答を見つけようとしました。
(1)《ブレンド》を配列に格納する
(2)《ブレンド》の配列の順番をシャッフルする
(3)《ブレンド》の配列の先頭から乱数で決めた個数だけ取り出し、
　　それを１皿目の《ブレンド》とする
(4)１皿目に使用されている《スパイス》を求める
(5)残った《ブレンド》から１皿目で使用した《スパイス》が含まれているものを
　　取り除き、２皿目の《ブレンド》とする
(6)２皿のポイントがこれまでの最大であれば、解答を更新する
(7)(2)に戻る

コメント
・楽しく問題に取り組めました。プログラミングも楽しかったです。
・Dropboxのフォルダ上にソースを置いておき、自宅と仕事場で実行していました。
　2月23日から実行しています。
・乱数任せのアルゴリズムなので、正解に近づいていくようなアルゴリズムにしたかったです。
・学生時代に遺伝的アルゴリズムのプログラムを組んだりしていましたが、
　うまい実装方法が思いつきませんでした。
・ブレンドリストから、１つの《ブレンド》を取り除いたものを１皿目にする、
　２つの《ブレンド》を取り除いたものを１皿目にする、というように
　ポイントが高いほうから組み合わせを試していくようにもしたかったのですが、
　あきらめました。
・昨日、twitterで@butchi_yさんの「CodeIQのカレー問題解けたー。トータルで半日ぐらいかかってしまったけど…。」
　というつぶやきを見て、びっくりしました。
・締め切りが延長されたことで、ポイントが1だけ高い解答が見つかりました。
・現在、『数学ガール』を読んでいます。
　「第８章 ハーモニック・ナンバー」まで読みました。
　まだまだ知らない数学があるなあと、ワクワクして読んでいます。



以下、使用したプログラムのソースです。

# 点数を初期化
max_point = 0

# これまでの結果のファイルからmax_pointを読み込む
open("curry-result.txt") { |file|
  max_point = file.readlines[1].to_i
}
print "max_point(file):"
p max_point

blendlist = []

# ファイルからすべてのblendを読み込む
# blendlistに格納する
open("blendlist.txt") {|file|
  while l = file.gets
    l.chop! # "\n" を取り除く
    spice = l.split(" ")
    blendlist.push([spice[0], spice[1]])
  end
}

# blendlistに含まれるspiceの数
# p blendlist.flatten.uniq.sort.size

# すべてのspiceをspicelistに格納する（重複なし、ソート済み）
spicelist = blendlist.flatten.uniq.sort


loop do

  dish1 = []
  dish2 = []
  point = 0

  # blendlistをシャッフル
  blendlist_shuffle = blendlist.sort_by { rand }
  # p blendlist_shuffle

  # 選択するblendの個数を乱数で設定（1〜blendの個数-1）
  # ２皿目が０にならないようにするため、blendの個数-1まで
  blend_num = rand(blendlist.size - 1) + 1
  # p blend_num

  # blendlistの先頭から個数分だけ取り出す
  # → １皿目のblend
  1.upto(blend_num) do
    dish1.push(blendlist_shuffle.shift)
  end

  # p dish1
 
  # １皿目で使用したspice（重複なし、ソート済み）
  spice1 = dish1.flatten.uniq.sort

  # print "spice1:"
  # p spice1

  # １皿目で使用したspiceを削除する
  # → ２皿目で使用できるspice
  spice2 = spicelist - spice1

  # print "spice2:"
  # p spice2

  # 残ったblendlistから使用したspiceのblendを削除する
  # → ２皿目のblend
  dish2 = blendlist_shuffle
  spice1.each do |spice|
    dish2.delete_if { |blend| (blend[0] === spice) || (blend[1] === spice) }
  end

  # print "dish1"
  # p dish1
  # print "dish2"
  # p dish2

  # ２番目の皿のblendが０だったら無効
  next if dish2.size === 0

  # 点数を計算する
  point = dish1.size + dish2.size
  # print "point:"
  # p point

  # 点数が最大値かどうかの判定
  if point > max_point then
    # 最大値を書き換え
    max_point = point
    print "max_point:"
    p max_point

    # blendの数が多い方を回答にする
    if dish1.size > dish2.size then
      spice_ans = spice1
    else
      spice_ans = spice2
    end

    # 回答のspiceをファイルに書き込む
    file = File.open("curry-result.txt",'w')
    spice_ans.each { |spice|
      file.print spice + " "
    }
    file.print "\n"
    # pointの最大値を書き込む
    file.puts max_point
    file.close
  end

end

