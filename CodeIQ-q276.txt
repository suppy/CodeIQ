destW = 256;
destH = 160;
resArr = [];

nMax = 16;
pile = 6;

srcWU = 11;
srcHU = 7;

for (n = 0; n < nMax; n ++) {
	// 元の画素
	srcW = srcWU * (n + 1);
	srcH = srcHU * (n + 1);
	srcArr = [];
	for (i = 0; i < srcW * srcH; i ++) {
		// 疑似ランダム
		srcArr[i] =  ((i * i * 4999 + 8999 & 0xFFFF) / 0x10000) % 2 * 255;
	}

	// バイリニア補間後の画素
	destArr = [];
	scaleX = destW / (srcW - 1);
	scaleY = destH / (srcH - 1);

	// バイリニア補間法
	for (y = 0; y < destH; y ++) {
		for (x = 0; x < destW; x ++) {
			x0 = x / scaleX|0;
			y0 = y / scaleY|0;

			x1 = x / scaleX - x0;
			y1 = y / scaleY - y0;

			col0 = srcArr[x0     + (y0    ) * srcW];
			col1 = srcArr[x0 + 1 + (y0    ) * srcW];
			col2 = srcArr[x0     + (y0 + 1) * srcW];
			col3 = srcArr[x0 + 1 + (y0 + 1) * srcW];

			destArr[x + y * destW] = Math.floor(
				  (1 - x1) * (1 - y1) * col0
				+      x1  * (1 - y1) * col1
				+ (1 - x1) *      y1  * col2
				+      x1  *      y1  * col3
			);
		}
	}

	// 重ね比率
	plRes = (n + pile) / (n + pile + 1);
	plDest = 1 / (n + pile + 1);

	// マップの合成
	for (i = 0; i < destW * destH; i ++) {
		if (n == 0) {
			resArr[i] = destArr[i];
		} else {
			resArr[i] = Math.floor(
				resArr[i] * plRes + destArr[i] * plDest
			);
		}
	}
}

// 戻り値結合
res = resArr.join(",");
return destW + "," + destH + "," + res;