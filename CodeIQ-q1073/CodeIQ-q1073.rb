# 増井技術士事務所  今週のアルゴリズムの@masuipeoさんからのアルゴリズムの問題
# 今週のお題：一筆書きできる配置は？
# https://codeiq.jp/ace/thisweek_masuipeo/q1073


# 処理開始時刻
t0 = Time.now
puts "処理開始時刻：#{t0}"
print "\n"


# 縦横のサイズ
height = 3
width  = 4

# すべてのパターンを生成
# パネルのパターンは4つ
patterns = (0..3).to_a.repeated_permutation(height * width).to_a

# パネルと格子点の番号の対応テーブル
#
#  0---1---2---3---4
#  | 0 | 1 | 2 | 3 |
#  5---6---7---8---9
#  | 4 | 5 | 6 | 7 |
# 10--11--12--13--14
#  | 8 | 9 |10 |11 |
# 15--16--17--18--19
#
panel2points = [[ 0,  1,  5,  6], [ 1,  2,  6,  7], [ 2,  3,  7,  8], [ 3,  4,  8,  9],
                [ 5,  6, 10, 11], [ 6,  7, 11, 12], [ 7,  8, 12, 13], [ 8,  9, 13, 14],
                [10, 11, 15, 16], [11, 12, 16, 17], [12, 13, 17, 18], [13, 14, 18, 19]]

# パネルのパターンを表す配列
# □　＼，／，×の順
# 各頂点から斜めに伸びる線の数を表す
# 左上、右上、左下、右下の順  
panels = [[0, 0, 0, 0], [1, 0, 0, 1], [0, 1, 1, 0], [1, 1, 1, 1]]                

# 一筆書きできるパターンの数       
hitofude = 0

patterns.each do |pattern|
  # すべてのパネルが□だった場合の各格子点の線の数
  num = [2, 3, 3, 3, 2,
         3, 4, 4, 4, 3,
         3, 4, 4, 4, 3,
         2, 3, 3, 3, 2]
  # 各パネルについて処理を行う
  pattern.length.times do |i|
    # パネルの各頂点について処理を行う
    4.times do |j|
      # パネルの斜めの線を加算する
      num[panel2points[i][j]] += panels[pattern[i]][j] 
    end
  end

  # 線の数が奇数の格子点を数える
  count = 0
  num.each do |i|
    count += 1 if i % 2 == 1
  end
  # 一筆書きできるのは、線の数が奇数の格子点が、0または2のときのみ
  if count == 0 || count == 2
    hitofude += 1
  end
end
puts hitofude


# 処理終了時刻
t1 = Time.now
print "\n"
puts "処理終了時刻：#{t1}"

# 処理時間
puts "処理時間：#{t1 - t0} sec"
